Help
    dotnet --help

New possibilities
    dotnet new

Clean libraries
    dotnet clean

Restore packages
    dotnet restore

Generate build
    dotnet build

To list sdks
    dotnet --list-sdks

---Commands to generate a DDD structure
Generate a Solution
    dotnet new --name <<Nome>>

Generate a webapi
    dotnet new webapi -n application -o Api.Application --no-https
        To add in a Solution
            dotnet sln add .\Api.Application\

Create Class Library
    dotnet new classlib -n Domain -o Api.Domain -f netcoreapp3.1
        To add in a Solution
            dotnet sln add .\Api.Domain\

Create Class Library
    dotnet new classlib -n CrossCutting -o Api.CrossCutting -f netcoreapp3.1
        To add in a Solution
            dotnet sln add .\Api.CrossCutting\

Create Class Library
    dotnet new classlib -n Data -o Api.Data -f netcoreapp3.1
        To add in a Solution
            dotnet sln add .\Api.Data\

Create Class Library
    dotnet new classlib -n Service -o Api.Service -f netcoreapp3.1
        To add in a Solution
            dotnet sln add .\Api.Service\

Installing dotnet tool
    dotnet tool install --global dotnet-ef
Run EntityFramework
    dotnet ef

Add reference to another classlib
    dotnet add .\Api.Data\ reference .\Api.Domain
    dotnet add .\Api.Service\ reference .\Api.Domain\
    dotnet add .\Api.Service\ reference .\Api.Data\
    dotnet add .\Api.Application\ reference .\Api.Domain\
    dotnet add .\Api.Application\ reference .\Api.Service\
    dotnet add .\Api.Application\ reference .\Api.CrossCutting\
    dotnet add .\Api.CrossCutting\ reference .\Api.Domain\
    dotnet add .\Api.CrossCutting\ reference .\Api.Service\
    dotnet add .\Api.CrossCutting\ reference .\Api.Data\

Step by Step to Data:
1 - Create a entity
2 - Create a map for Entity
3 - Add in Context:
    3.1 the DbSet<newEntity>
    3.2 the modelBuilder.Entity map
4 - Configure the ContextFactory

To create a migration
    dotnet ef migrations add First_Migration
To remove a migration
    dotnet ef migrations remove
To connect real database and push the data and information
    dotnet ef database update

Add data test project
    dotnet new xunit -n Api.Data.Test -o Api.Data.Test

Add on Solution
    dotnet sln add Api.Data.Test

Add references o test
    dotnet add Api.Data.Test reference Api.Data
    dotnet add Api.Data.Test reference Api.CrossCutting
    dotnet add Api.Data.Test reference Api.Domain
    dotnet add Api.Data.Test reference Api.Application

Add service test project
    dotnet new xunit -n Api.Service.Test -o Api.Service.Test
    dotnet sln add Api.Service.Test
    dotnet add Api.Service.Test reference Api.Service
    dotnet add Api.Service.Test reference Api.CrossCutting
    dotnet add Api.Service.Test reference Api.Domain

Add application test project
    dotnet new xunit -n Api.Application.Test -o Api.Application.Test
    dotnet sln add Api.Application.Test
    dotnet add Api.Application.Test reference Api.Application
    dotnet add Api.Application.Test reference Api.Service
    dotnet add Api.Application.Test reference Api.Domain

Add Integration test project
    dotnet new xunit -n Api.Integration.Test -o Api.Integration.Test
    dotnet sln add Api.Integration.Test
    dotnet add Api.Integration.Test reference Api.Data
    dotnet add Api.Integration.Test reference Api.CrossCutting
    dotnet add Api.Integration.Test reference Api.Application
    dotnet add Api.Integration.Test reference Api.Domain